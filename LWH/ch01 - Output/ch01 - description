[9. Hello World 출력하기, 네임스페이스(namespace)]
---------------------------------------------------------------------------------------------------------------------
똑같이 "Hello World 123" 이라는 문자열을 출력할때
(참고코드: 01-helloworld.c, 01-helloworld.cpp)

```c
printf("hello %s %d\n", "world ", 123);
```

c에서는 %s, %d 를 통해 문자열 및 정수가 들어갈 자리라고 일일이 지정해줘야 하는 반면

```c++
std::cout << "hello " << "world " << 123 << std::endl;
```
c++에서는 바로 출력하고자 하는 문자열을 바로 입력하면 된다는 장점이 있다.
    장점:
        1. 가용성 상승
        2. 가독성 상승

* 재밌는건 cout을 console out인건 이제 처음 알게되었다. 또한 << 을 콘솔에다 출력하고자 하는 값들을 밀어넣어서 출력한다고 이해할 수 있다. 점이다. (앞으로 절대 헷갈리지 않을것 같다.)


위에서 볼 수 있듯이 cout 을 입력하기 전에 std:: 을 붙인것을 볼 수 있는데 이게 무엇인가? => 네임스페이스


네임스페이스(namespace) => 이름을 정해주는 공간이다.

namespace
* Java의 패키지나 C#의 네임스페이스와 비슷하다.
(똑같은 함수명이지만 서로 다른 패키지에 있는 경우 서로 다르다는것을 구분하기 위해 사용된다.)
* 아래의 항목에 해당되는 것들과의 이름 충돌을 피하기 위해서 사용된다.
    -> 함수
    -> 클래스
    -> 기타 등등

```C++
namespace hello
{
    void PrintHelloWorld();
}
```

<기본적으로 C++ namespace에 소문자를 써주는것이 일반적이기 때문에 지금처럼 Hello가 아니라 hello를 작성했다>
지금 hello라는 네임스페이스 안에 PrintHelloworld를 사용했다는것을 알 수 있다.


namespace hello
{
    void SayHello();
}

namespace hi
{
    void SayHello();
}

hello::SayHello();
hi::SayHello();

using 지시문
* Java의 import나 C#의 using과 비슷
* 타이핑의 양을 줄이는 방법일 뿐

예를 들어서 cout, endl 을 사용할때 std::cout, std::endl 이런식으로 작성해야 하는데 무슨 라이브러리를 사용하게다고 선언한 이후 using namespace std; 한줄 추가함으로서 cout, endl 만적어도 되는것을 볼 수 있다.
(참고 코드: 02-namespace.cpp, 02-nonamespace.cpp)
---------------------------------------------------------------------------------------------------------------------


[10. 코드보기 using  namespace]
---------------------------------------------------------------------------------------------------------------------
(참고 코드: 03-namespace.cpp, HelloPope.h, HiPope.cpp, HiPope.h, 04-HelloHinamespace.cpp)
소스코드의 의도: 서로 다른 헤더파일에서 똑같은 함수 명을 사용해도 결국엔 namespace를 통해 서로 구분이 가능하다
